from typing import Mapping, Iterable, Hashable, Union, overload, ItemsView
from ..CustomizedPath import CustomizedPath
folderPath = Union[str, list, tuple, CustomizedPath]


class Folder(Mapping):
    _name: str
    _hash: int
    _son_folder: tuple[dict[str, [Folder, ...]], ...] or None
    _values: tuple[dict[str, [any, ...]], ...]

    def __init__(self, name: str = 'undefined', hash_width: int = None, no_son_folder: bool = False):...

    @overload
    def add(self, key: Hashable, value: any, folder_path: folderPath = None) -> None:...

    @overload
    def add(self, folder: Folder, folder_path: folderPath = None) -> None:...

    def add(self, key, value = None, folder_path = None) -> None:...

    def get(self, key: Hashable, folder_path: folderPath = None) -> any:...

    def remove(self, item: Hashable, folder_path: folderPath = None) -> None:...

    def cd(self, folder_path: folderPath) -> Folder or any:...

    def __iter__(self, folder_path: folderPath = None) -> Iterable:...

    def __len__(self, folder_path: folderPath = None) -> int:...

    def __getitem__(self, __key: Hashable, folder_path: folderPath = None) -> any:...

    @overload
    def __setitem__(self, key: Hashable, value: any, folder_path: folderPath = None) -> None:...

    @overload
    def __setitem__(self, folder: Folder, folder_path: folderPath = None) -> None:...

    def __setitem__(self, key, value = None, folder_path = None) -> None:...

    def __delitem__(self, key: Hashable, folder_path: folderPath = None) -> None:...

    def hash_index(self, item: Hashable) -> int:...

    def match_son_folder(self, folder_path: folderPath) -> Folder:...

    def __hash__(self):...

    def items(self) -> ItemsView:
        pass

    def folders(self) -> ItemsView:
        pass
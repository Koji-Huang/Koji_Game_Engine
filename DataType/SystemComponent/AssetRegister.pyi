from typing import overload

from DataType.Folder.FolderStruct_Hash import Folder, folderPath
from DataType.Asset.AbstractAsset import Asset


class AssetManager(Folder):
    def __init__(self):...
    @overload
    def __getitem__(self, __key, folder_path: folderPath = None, get_source: bool = False) -> Asset | any:...
    @overload
    def __getitem__(self, __key, folder_path: folderPath = None, get_source: bool = True) -> AssetManager:...
    def __setitem__(self, key, value=AssetManager, folder_path: folderPath = None) -> None:...
    def __delitem__(self, key, folder_path: folderPath = None, is_folder: bool = False) -> None:...
    def set_active(self, key, folder_path: folderPath = None) -> bool:...
    def get_active(self, key, folder_path: folderPath = None) -> bool:...
    def is_active(self, key, folder_path: folderPath = None) -> bool:...
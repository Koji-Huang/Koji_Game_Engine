from Event.UIEvent.Basic import Basic as Event
from DataType import LinkedList


class Root:
    father: Root
    event: dict[str, list[Event]]
    event_type: set[str]
    event_type_match: dict[str, [set[Root]]]
    son: LinkedList[int, [Root]] or list[int, [Root]]
    id: str

    def __init__(self, *args, **kwargs) -> None:...

    def update(self, *args) -> None:...

    def __update__(self) -> None:...

    def tree_add_son(self, son: Root) -> None:...

    def tree_remove_son(self, son: Root) -> None:...

    def tree_find_root(self) -> Root:...

    def tree_goto_father(self, general: int) -> Root:...

    def event_add(self, event_type: str, event: Event, **kwargs) -> None:...

    def event_remove(self, event_type: str, event: str or Event) -> None:...

    def event_spread(self, event_name, **event_args):...

    def event_check(self, event_object: Event, *args, **kwargs) -> bool:...

    def event_run(self, event_object: Event, *args, **kwargs) -> any:...

    def event_clean(self) -> None:...

    def event_tree(self) -> list:...

    def event_value(self) -> list:...

    def event_tree_update(self, another_set):...

    def spread_type_update(self, son: Root = None, increase: bool = True, decrease: bool = False):
        pass

    def delete(self)->None:...

    def delete_with_son(self)->None:...

    def __copy__(self, copied: any = None):...
